/*
Test generated by RoostGPT for test sampleTest using AI Type Open AI and AI Model gpt-4

1. **Scenario**: Test with a positive price value
   - **Description**: The method should return the price value as set in the object.
   - **Input**: Set oPrice as 100.0
   - **Expected Output**: The method should return 100.0

2. **Scenario**: Test with a zero price value
   - **Description**: The method should return 0 if the price value is set as 0.
   - **Input**: Set oPrice as 0.0
   - **Expected Output**: The method should return 0.0

3. **Scenario**: Test with a negative price value
   - **Description**: The method should return the negative price value if set in the object.
   - **Input**: Set oPrice as -100.0
   - **Expected Output**: The method should return -100.0

4. **Scenario**: Test with a very large price value
   - **Description**: The method should handle very large values and return them correctly.
   - **Input**: Set oPrice as 1e+10
   - **Expected Output**: The method should return 1e+10

5. **Scenario**: Test with a decimal price value
   - **Description**: The method should return the decimal price value if set in the object.
   - **Input**: Set oPrice as 100.75
   - **Expected Output**: The method should return 100.75

6. **Scenario**: Test with the default value of the double datatype
   - **Description**: The method should return the default value of the double datatype if no price value is set.
   - **Input**: Do not set a value for oPrice
   - **Expected Output**: The method should return 0.0

7. **Scenario**: Test with the maximum value of the double datatype
   - **Description**: The method should handle the maximum value of the double datatype and return it correctly.
   - **Input**: Set oPrice as Double.MAX_VALUE
   - **Expected Output**: The method should return Double.MAX_VALUE

8. **Scenario**: Test with the minimum value of the double datatype
   - **Description**: The method should handle the minimum value of the double datatype and return it correctly.
   - **Input**: Set oPrice as Double.MIN_VALUE
   - **Expected Output**: The method should return Double.MIN_VALUE
*/
package com.business.entities;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Orders_getoPrice_5561eedf69_Test {

    @Test
    public void testPositivePriceValue() {
        Orders order = new Orders();
        order.setoPrice(100.0);
        assertEquals(100.0, order.getoPrice());
    }

    @Test
    public void testZeroPriceValue() {
        Orders order = new Orders();
        order.setoPrice(0.0);
        assertEquals(0.0, order.getoPrice());
    }

    @Test
    public void testNegativePriceValue() {
        Orders order = new Orders();
        order.setoPrice(-100.0);
        assertEquals(-100.0, order.getoPrice());
    }

    @Test
    public void testLargePriceValue() {
        Orders order = new Orders();
        order.setoPrice(1e+10);
        assertEquals(1e+10, order.getoPrice());
    }

    @Test
    public void testDecimalPriceValue() {
        Orders order = new Orders();
        order.setoPrice(100.75);
        assertEquals(100.75, order.getoPrice());
    }

    @Test
    public void testDefaultDoubleValue() {
        Orders order = new Orders();
        assertEquals(0.0, order.getoPrice());
    }

    @Test
    public void testMaxDoubleValue() {
        Orders order = new Orders();
        order.setoPrice(Double.MAX_VALUE);
        assertEquals(Double.MAX_VALUE, order.getoPrice());
    }

    @Test
    public void testMinDoubleValue() {
        Orders order = new Orders();
        order.setoPrice(Double.MIN_VALUE);
        assertEquals(Double.MIN_VALUE, order.getoPrice());
    }
}
