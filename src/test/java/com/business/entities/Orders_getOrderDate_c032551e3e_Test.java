/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the getOrderDate() function returns a date for a valid order.
   - Description: Create an order with a valid date and check if the getOrderDate() function returns the correct date.

2. Test Scenario: Check if the getOrderDate() function returns null for an order with no date.
   - Description: Create an order without a date and check if the getOrderDate() function returns null.

3. Test Scenario: Check if the getOrderDate() function returns the correct date after changing the order's date.
   - Description: Create an order, change its date, and then check if the getOrderDate() function returns the new date.

4. Test Scenario: Check if the getOrderDate() function handles the leap years correctly.
   - Description: Create an order with a date set to February 29 in a leap year and check if the getOrderDate() function returns the correct date.

5. Test Scenario: Check if the getOrderDate() function returns the correct date for an order created on the last day of the year.
   - Description: Create an order with a date set to December 31 and check if the getOrderDate() function returns the correct date.

6. Test Scenario: Check if the getOrderDate() function returns the correct date for an order created on the first day of the year.
   - Description: Create an order with a date set to January 1 and check if the getOrderDate() function returns the correct date.

7. Test Scenario: Check if the getOrderDate() function returns the correct date for an order created on a leap second.
   - Description: Create an order with a date set to a leap second (23:59:60 on June 30 or December 31) and check if the getOrderDate() function returns the correct date.

8. Test Scenario: Check if the getOrderDate() function returns the correct date for an order created at the maximum possible Date value.
   - Description: Create an order with a date set to the maximum possible Date value and check if the getOrderDate() function returns the correct date.

9. Test Scenario: Check if the getOrderDate() function returns the correct date for an order created at the minimum possible Date value.
   - Description: Create an order with a date set to the minimum possible Date value and check if the getOrderDate() function returns the correct date.

10. Test Scenario: Check if the getOrderDate() function is thread-safe.
    - Description: Create multiple threads that create orders simultaneously and check if the getOrderDate() function returns the correct dates for all orders.
*/
package com.business.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;

public class Orders_getOrderDate_c032551e3e_Test {
    private Orders order;

    @BeforeEach
    public void setup() {
        order = new Orders();
    }

    @Test
    public void testGetOrderDate_ValidOrderDate() {
        Date date = new Date();
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_NoOrderDate() {
        assertNull(order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_ChangedOrderDate() {
        Date date = new Date();
        order.setOrderDate(date);

        Date newDate = new Date(date.getTime() + 1000000);
        order.setOrderDate(newDate);

        assertEquals(newDate, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_LeapYear() {
        Date date = new Date(116, 1, 29); // 29th Feb 2016
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_EndOfYear() {
        Date date = new Date(119, 11, 31); // 31st Dec 2019
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_StartOfYear() {
        Date date = new Date(120, 0, 1); // 1st Jan 2020
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_LeapSecond() {
        Date date = new Date(114, 5, 30, 23, 59, 60); // 30th June 2014, 23:59:60
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_MaxPossibleDate() {
        Date date = new Date(Long.MAX_VALUE);
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_MinPossibleDate() {
        Date date = new Date(Long.MIN_VALUE);
        order.setOrderDate(date);

        assertEquals(date, order.getOrderDate());
    }

    @Test
    public void testGetOrderDate_ThreadSafety() throws InterruptedException {
        Thread thread1 = new Thread(() -> {
            Date date = new Date(115, 6, 15); // 15th July 2015
            order.setOrderDate(date);
        });

        Thread thread2 = new Thread(() -> {
            Date date = new Date(116, 7, 16); // 16th August 2016
            order.setOrderDate(date);
        });

        // Start the threads
        thread1.start();
        thread2.start();

        // Wait for the threads to finish
        thread1.join();
        thread2.join();

        // Check the order date
        assertNotNull(order.getOrderDate());
    }
}
