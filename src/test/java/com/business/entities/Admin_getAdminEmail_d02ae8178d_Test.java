/*
Test generated by RoostGPT for test sampleTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the function returns the correct Admin email.
- Description: This scenario is to verify whether the function is able to return the correct admin email.

Test Scenario 2: Check if the function returns null when the admin email is not set.
- Description: This scenario is to verify whether the function can handle situations where the admin email is not set and it should return null.

Test Scenario 3: Check if the function returns an empty string when the admin email is set as an empty string.
- Description: This scenario is to verify whether the function can handle situations where the admin email is set as an empty string and it should return an empty string.

Test Scenario 4: Check if the function returns the correct email when the admin email is set with special characters.
- Description: This scenario is to verify whether the function can handle situations where the admin email is set with special characters and it should return the correct email.

Test Scenario 5: Check if the function returns the correct email when the admin email is set with a mix of uppercase and lowercase letters.
- Description: This scenario is to verify whether the function can handle situations where the admin email is set with a mix of uppercase and lowercase letters and it should return the correct email. 

Test Scenario 6: Check if the function returns the correct email when the admin email is set with numbers.
- Description: This scenario is to verify whether the function can handle situations where the admin email is set with numbers and it should return the correct email.

Test Scenario 7: Check if the function returns the correct email when the admin email is set with a mix of special characters, numbers, uppercase and lowercase letters.
- Description: This scenario is to verify whether the function can handle situations where the admin email is set with a mix of special characters, numbers, uppercase and lowercase letters and it should return the correct email.
*/
package com.business.entities;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class Admin_getAdminEmail_d02ae8178d_Test {

    @Test
    public void testGetAdminEmail() {
        Admin admin = new Admin();
        admin.setAdminEmail("test@example.com");
        assertEquals("test@example.com", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWhenNotSet() {
        Admin admin = new Admin();
        assertNull(admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWhenEmpty() {
        Admin admin = new Admin();
        admin.setAdminEmail("");
        assertEquals("", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWithSpecialCharacters() {
        Admin admin = new Admin();
        admin.setAdminEmail("test#@example.com");
        assertEquals("test#@example.com", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWithMixOfUppercaseAndLowercaseLetters() {
        Admin admin = new Admin();
        admin.setAdminEmail("Test@ExAmPlE.com");
        assertEquals("Test@ExAmPlE.com", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWithNumbers() {
        Admin admin = new Admin();
        admin.setAdminEmail("test123@example.com");
        assertEquals("test123@example.com", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailWithMixOfSpecialCharactersNumbersUppercaseAndLowercaseLetters() {
        Admin admin = new Admin();
        admin.setAdminEmail("Test123#@ExAmPlE.com");
        assertEquals("Test123#@ExAmPlE.com", admin.getAdminEmail());
    }
}
