/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the `getAdminEmail` function returns the correct email address.
   - Description: The function should return the email address of the admin. 
   - Expected result: The returned value should be the correct email address of the admin.

2. Test Scenario: Check if the `getAdminEmail` function returns a non-null value.
   - Description: The function should not return a null value as the email address of the admin should always be present.
   - Expected result: The returned value should not be null.

3. Test Scenario: Check if the `getAdminEmail` function returns a string.
   - Description: The function should return a string as email addresses are strings.
   - Expected result: The returned value should be a string.

4. Test Scenario: Check if the `getAdminEmail` function returns a value of a valid email format.
   - Description: The function should return a value that is in the valid email format i.e., it should have '@' and '.' symbols.
   - Expected result: The returned value should be in a valid email format.

5. Test Scenario: Check if the `getAdminEmail` function returns a value of appropriate length.
   - Description: The function should return a value that is of appropriate length. It should not be too long or too short.
   - Expected result: The returned value should be of appropriate length.

6. Test Scenario: Check if the `getAdminEmail` function returns a value that does not contain any special characters (other than '@' and '.').
   - Description: The function should return a value that does not contain any special characters (other than '@' and '.').
   - Expected result: The returned value should not contain any special characters (other than '@' and '.').
*/
package com.business.entities;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Admin_getAdminEmail_d02ae8178d_Test {

    @Test
    public void testGetAdminEmail() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertEquals("admin@example.com", admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailNotNull() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertNotNull(admin.getAdminEmail());
    }

    @Test
    public void testGetAdminEmailIsString() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertTrue(admin.getAdminEmail() instanceof String);
    }

    @Test
    public void testGetAdminEmailValidFormat() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertTrue(admin.getAdminEmail().matches("^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)*(\\.[a-zA-Z]{2,})$"));
    }

    @Test
    public void testGetAdminEmailAppropriateLength() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertTrue(admin.getAdminEmail().length() > 5 && admin.getAdminEmail().length() < 255);
    }

    @Test
    public void testGetAdminEmailNoSpecialCharacters() {
        Admin admin = new Admin();
        admin.setAdminEmail("admin@example.com");
        Assertions.assertTrue(admin.getAdminEmail().matches("^[a-zA-Z0-9@.]*$"));
    }
}
