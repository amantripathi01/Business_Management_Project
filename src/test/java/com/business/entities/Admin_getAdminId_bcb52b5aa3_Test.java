/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the `getAdminId` function returns the correct `adminId` value.
- Test Steps: Call the `getAdminId` function and compare the returned value with the expected `adminId`.
- Expected Result: The returned `adminId` should match the expected `adminId`.

2. Test Scenario: Check if the `getAdminId` function returns an integer value.
- Test Steps: Call the `getAdminId` function and check the type of the returned value.
- Expected Result: The `getAdminId` function should return an integer value.

3. Test Scenario: Check if the `getAdminId` function returns a non-negative integer value.
- Test Steps: Call the `getAdminId` function and check if the returned value is non-negative.
- Expected Result: The `getAdminId` function should return a non-negative integer value.

4. Test Scenario: Check if the `getAdminId` function returns a unique `adminId` for each admin.
- Test Steps: Call the `getAdminId` function for different admin objects and compare the returned values.
- Expected Result: The `getAdminId` function should return a unique `adminId` for each admin.

5. Test Scenario: Check if the `getAdminId` function returns the same `adminId` for the same admin object.
- Test Steps: Call the `getAdminId` function multiple times for the same admin object and compare the returned values.
- Expected Result: The `getAdminId` function should return the same `adminId` for the same admin object.

6. Test Scenario: Check if the `getAdminId` function does not return null.
- Test Steps: Call the `getAdminId` function and check if the returned value is not null.
- Expected Result: The `getAdminId` function should not return null.
*/
package com.business.entities;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Admin_getAdminId_bcb52b5aa3_Test {
    private Admin admin;

    @BeforeEach
    public void setUp() {
        admin = new Admin();
        admin.setAdminId(123);
    }

    @Test
    public void testGetAdminId_CorrectValue() {
        int expectedAdminId = 123;
        int actualAdminId = admin.getAdminId();
        assertEquals(expectedAdminId, actualAdminId, "The returned adminId did not match the expected value.");
    }

    @Test
    public void testGetAdminId_IsNonNegative() {
        assertTrue(admin.getAdminId() >= 0, "The returned adminId is negative.");
    }

    @Test
    public void testGetAdminId_IsUnique() {
        Admin anotherAdmin = new Admin();
        anotherAdmin.setAdminId(456);
        assertNotEquals(admin.getAdminId(), anotherAdmin.getAdminId(), "The returned adminId is not unique.");
    }

    @Test
    public void testGetAdminId_IsConsistent() {
        int firstCall = admin.getAdminId();
        int secondCall = admin.getAdminId();
        assertEquals(firstCall, secondCall, "The returned adminId is not consistent.");
    }
}
