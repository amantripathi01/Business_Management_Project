/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Verify the getAdminId() function returns a valid integer
- Precondition: The adminId is set with a valid integer value
- Steps: Call the getAdminId() function
- Expected Result: The function should return the integer value that the adminId is set to

Test Scenario 2: Verify the getAdminId() function returns the correct adminId when it is changed
- Precondition: The adminId is set with a valid integer value
- Steps: Change the adminId to a different valid integer value, then call the getAdminId() function
- Expected Result: The function should return the new value of the adminId

Test Scenario 3: Verify the getAdminId() function returns the same adminId when called multiple times without changing the adminId
- Precondition: The adminId is set with a valid integer value
- Steps: Call the getAdminId() function multiple times without changing the adminId
- Expected Result: The function should return the same value each time

Test Scenario 4: Verify the getAdminId() function returns an error when the adminId is not set
- Precondition: The adminId is not set
- Steps: Call the getAdminId() function
- Expected Result: The function should return an error indicating that the adminId is not set

Note: The last scenario may not apply if the default behavior of the application is to assign a default value to adminId when it is not explicitly set.
*/
package com.business.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Admin_getAdminId_bcb52b5aa3_Test {

    private Admin admin;

    @BeforeEach
    public void setup() {
        admin = new Admin();
    }

    @Test
    public void testGetAdminId_ValidValue() {
        // Set adminId with valid integer value
        admin.setAdminId(1001);
        // Call the getAdminId() function
        int result = admin.getAdminId();
        // Expected Result: The function should return the integer value that the adminId is set to
        assertEquals(1001, result, "Admin Id should match the set value");
    }

    @Test
    public void testGetAdminId_ChangedValue() {
        // Set adminId with valid integer value
        admin.setAdminId(1001);
        // Change the adminId to a different valid integer value
        admin.setAdminId(2002);
        // Call the getAdminId() function
        int result = admin.getAdminId();
        // Expected Result: The function should return the new value of the adminId
        assertEquals(2002, result, "Admin Id should match the new set value");
    }

    @Test
    public void testGetAdminId_MultipleCalls() {
        // Set adminId with valid integer value
        admin.setAdminId(1001);
        // Call the getAdminId() function multiple times without changing the adminId
        int result1 = admin.getAdminId();
        int result2 = admin.getAdminId();
        int result3 = admin.getAdminId();
        // Expected Result: The function should return the same value each time
        assertEquals(1001, result1, "Admin Id should match each time");
        assertEquals(1001, result2, "Admin Id should match each time");
        assertEquals(1001, result3, "Admin Id should match each time");
    }

    @Test
    public void testGetAdminId_NotSet() {
        // Precondition: The adminId is not set
        // Call the getAdminId() function
        // Expected Result: The function should return an error indicating that the adminId is not set
        assertThrows(IllegalStateException.class, () -> admin.getAdminId());
    }
}
