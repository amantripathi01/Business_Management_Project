/*
Test generated by RoostGPT for test sampleTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test with a positive valid double value.
   - Input: Call the setoPrice function with a valid positive double number like 100.50
   - Expected Output: The oPrice should be set to 100.50 without any error or exception.

2. Scenario: Test with a negative double value.
   - Input: Call the setoPrice function with a negative double number like -50.25.
   - Expected Output: Depending on the business logic, the oPrice might be set to -50.25 or an error/exception might be thrown indicating invalid input.

3. Scenario: Test with zero.
   - Input: Call the setoPrice function with zero.
   - Expected Output: The oPrice should be set to 0 without any error or exception.

4. Scenario: Test with a very large double value.
   - Input: Call the setoPrice function with a very large double number like 1E308.
   - Expected Output: The oPrice should be set to 1E308 without any error or exception or if there is a limit on the size of the double value, an error/exception might be thrown.

5. Scenario: Test with a very small positive double value.
   - Input: Call the setoPrice function with a very small positive double number like 1E-308.
   - Expected Output: The oPrice should be set to 1E-308 without any error or exception.

6. Scenario: Test with a very small negative double value.
   - Input: Call the setoPrice function with a very small negative double number like -1E-308.
   - Expected Output: Depending on the business logic, the oPrice might be set to -1E-308 or an error/exception might be thrown indicating invalid input.

7. Scenario: Test with NaN (Not a Number).
   - Input: Call the setoPrice function with NaN.
   - Expected Output: An error or exception should be thrown indicating invalid input.

8. Scenario: Test with Infinity.
   - Input: Call the setoPrice function with Infinity.
   - Expected Output: An error or exception should be thrown indicating invalid input.

9. Scenario: Test with -Infinity.
   - Input: Call the setoPrice function with -Infinity.
   - Expected Output: An error or exception should be thrown indicating invalid input.

10. Scenario: Test with null.
   - Input: Call the setoPrice function with null.
   - Expected Output: An error or exception should be thrown indicating invalid input.
*/
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.business.entities.User;
import com.business.entities.Orders;

public class OrdersSetoPriceTest {

    private Orders order;

    @BeforeEach
    public void setUp() {
        order = new Orders();
    }

    @Test
    public void testSetoPrice_positiveValidDouble() {
        double price = 100.50;
        order.setoPrice(price);
        assertEquals(price, order.getoPrice());
    }

    @Test
    public void testSetoPrice_negativeDouble() {
        double price = -50.25;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }

    @Test
    public void testSetoPrice_zero() {
        double price = 0;
        order.setoPrice(price);
        assertEquals(price, order.getoPrice());
    }

    @Test
    public void testSetoPrice_largeDouble() {
        double price = 1E308;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }

    @Test
    public void testSetoPrice_smallPositiveDouble() {
        double price = 1E-308;
        order.setoPrice(price);
        assertEquals(price, order.getoPrice());
    }

    @Test
    public void testSetoPrice_smallNegativeDouble() {
        double price = -1E-308;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }

    @Test
    public void testSetoPrice_NaN() {
        double price = Double.NaN;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }

    @Test
    public void testSetoPrice_Infinity() {
        double price = Double.POSITIVE_INFINITY;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }

    @Test
    public void testSetoPrice_NegativeInfinity() {
        double price = Double.NEGATIVE_INFINITY;
        assertThrows(IllegalArgumentException.class, () -> order.setoPrice(price));
    }
}
