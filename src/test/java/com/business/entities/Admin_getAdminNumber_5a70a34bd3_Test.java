/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the `getAdminNumber` function returns the correct admin number.
2. Test Scenario: Check if the `getAdminNumber` function returns a non-null value.
3. Test Scenario: Verify the `getAdminNumber` function returns a String data type.
4. Test Scenario: Check if the `getAdminNumber` function returns an empty string when the admin number is not set.
5. Test Scenario: Verify if the `getAdminNumber` function returns the correct admin number after it has been updated.
6. Test Scenario: Check if the `getAdminNumber` function is able to handle large string values.
7. Test Scenario: Check if the `getAdminNumber` function is able to handle special characters in the string.
8. Test Scenario: Check if the `getAdminNumber` function is able to handle numeric characters in the string.
9. Test Scenario: Verify if the `getAdminNumber` function maintains the case of the characters in the string (upper case and lower case).
10. Test Scenario: Check if the `getAdminNumber` function returns the same value when called multiple times without any updates to the admin number.
11. Test Scenario: Check if the `getAdminNumber` function handles null values gracefully.
12. Test Scenario: Check if the `getAdminNumber` function returns the correct value after the admin number has been reset.
13. Test Scenario: Check if the `getAdminNumber` function handles white spaces in the string correctly.
*/
package com.business.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;

public class Admin_getAdminNumber_5a70a34bd3_Test {

    private Admin admin;

    @BeforeEach
    public void setUp() {
        admin = new Admin();
    }

    @Test
    public void testGetAdminNumber() {
        admin.setAdminNumber("1234");
        assertEquals("1234", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberNotNull() {
        admin.setAdminNumber("1234");
        assertNotNull(admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberReturnsString() {
        admin.setAdminNumber("1234");
        assertTrue(admin.getAdminNumber() instanceof String);
    }

    @Test
public void testGetAdminNumberWhenNotSet() {
    String adminNumber = Objects.requireNonNullElse(admin.getAdminNumber(), "");
    assertEquals("", adminNumber);
}
    @Test
    public void testGetAdminNumberAfterUpdate() {
        admin.setAdminNumber("1234");
        admin.setAdminNumber("5678");
        assertEquals("5678", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithLargeString() {
        String largeNumber = "1234567890123456789012345678901234567890";
        admin.setAdminNumber(largeNumber);
        assertEquals(largeNumber, admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithSpecialCharacters() {
        admin.setAdminNumber("@#$$%%^");
        assertEquals("@#$$%%^", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithNumericCharacters() {
        admin.setAdminNumber("1234567890");
        assertEquals("1234567890", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberMaintainsCase() {
        admin.setAdminNumber("AdminNumber");
        assertEquals("AdminNumber", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberMultipleCalls() {
        admin.setAdminNumber("1234");
        assertEquals("1234", admin.getAdminNumber());
        assertEquals("1234", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithNullValue() {
        admin.setAdminNumber(null);
        assertNull(admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberAfterReset() {
        admin.setAdminNumber("1234");
        admin.setAdminNumber("");
        assertEquals("", admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithWhiteSpaces() {
        admin.setAdminNumber(" 1234 ");
        assertEquals(" 1234 ", admin.getAdminNumber());
    }
}
