/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate the function when a null value is passed.
    - **Expected Result:** The function should throw a `NotNull` constraint violation as the adminEmail cannot be null.

2. **Scenario:** Validate the function when an invalid email address is passed.
    - **Expected Result:** The function should throw an `Email` constraint violation as the input string is not a valid email address.

3. **Scenario:** Validate the function when a valid email address is passed.
    - **Expected Result:** The function should successfully update the `adminEmail` with the input string and should not throw any exceptions.

4. **Scenario:** Validate the function when an email address exceeding the allowed size limit is passed.
    - **Expected Result:** The function should throw a `Size` constraint violation as the input string exceeds the allowed size for the `adminEmail`.

5. **Scenario:** Validate the function when an empty string is passed.
    - **Expected Result:** The function should throw an `Email` constraint violation as the input string is not a valid email address.

6. **Scenario:** Validate the function when a string with leading and trailing spaces is passed.
    - **Expected Result:** The function should trim the spaces and successfully update the `adminEmail` if the trimmed string is a valid email address.

7. **Scenario:** Validate the function when a string with special characters (allowed in email) is passed.
    - **Expected Result:** The function should successfully update the `adminEmail` with the input string and should not throw any exceptions.

8. **Scenario:** Validate the function when a string with special characters (not allowed in email) is passed.
    - **Expected Result:** The function should throw an `Email` constraint violation as the input string is not a valid email address.
*/
package com.business.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class Admin_setAdminEmail_de656ae2b5_Test {

    @Autowired
    private Admin admin;

    private Validator validator;

    @BeforeEach
    public void setUp() {
        validator = Validation.buildDefaultValidatorFactory().getValidator();
    }

    @Test
    public void testSetAdminEmail_NullValue() {
        admin.setAdminEmail(null);
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertTrue(violations.stream().anyMatch(violation -> violation.getMessage().contains("NotNull")));
    }

    @Test
    public void testSetAdminEmail_InvalidEmail() {
        admin.setAdminEmail("invalid_email");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertTrue(violations.stream().anyMatch(violation -> violation.getMessage().contains("Email")));
    }

    @Test
    public void testSetAdminEmail_ValidEmail() {
        admin.setAdminEmail("valid.email@example.com");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertTrue(violations.isEmpty());
    }

    @Test
    public void testSetAdminEmail_EmailExceedingSizeLimit() {
        String oversizedEmail = "a".repeat(300) + "@example.com";
        admin.setAdminEmail(oversizedEmail);
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertTrue(violations.stream().anyMatch(violation -> violation.getMessage().contains("Size")));
    }

    @Test
    public void testSetAdminEmail_EmptyString() {
        admin.setAdminEmail("");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertTrue(violations.stream().anyMatch(violation -> violation.getMessage().contains("Email")));
    }

    @Test
    public void testSetAdminEmail_StringWithSpaces() {
        admin.setAdminEmail(" valid.email@example.com ");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertTrue(violations.isEmpty());
    }

    @Test
    public void testSetAdminEmail_StringWithAllowedSpecialCharacters() {
        admin.setAdminEmail("valid.email+alias@example.com");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertTrue(violations.isEmpty());
    }

    @Test
    public void testSetAdminEmail_StringWithDisallowedSpecialCharacters() {
        admin.setAdminEmail("invalid_email@example.com");
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertTrue(violations.stream().anyMatch(violation -> violation.getMessage().contains("Email")));
    }
}
