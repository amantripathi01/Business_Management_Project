/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. **Positive test scenarios:**
   - Test when a valid email is provided. The function should accept the email and set it as the adminEmail.
   - Test when an email with upper and lower case characters is provided. The function should accept the email and set it as the adminEmail.
   - Test when an email with numbers and special characters (like dot and dash) is provided. The function should accept the email and set it as the adminEmail.
   - Test when an email with the maximum allowed length is provided. The function should accept the email and set it as the adminEmail.
   
2. **Negative test scenarios:**
   - Test when an empty string is provided. The function should throw a `@NotNull` validation error.
   - Test when a null value is provided. The function should throw a `@NotNull` validation error.
   - Test when an email without '@' symbol is provided. The function should throw an `@Email` validation error.
   - Test when an email without a domain is provided. The function should throw an `@Email` validation error.
   - Test when an email with more than the allowed length is provided. The function should throw a `@Size` validation error.
   - Test when a string that is not an email is provided. The function should throw an `@Email` validation error.

3. **Edge test scenarios:**
   - Test when an email with minimum allowed length (like a@b.c) is provided. The function should accept the email and set it as the adminEmail.
   - Test when an email with maximum allowed characters before '@' is provided. The function should accept the email and set it as the adminEmail.
   - Test when an email with maximum allowed characters after '@' is provided. The function should accept the email and set it as the adminEmail.
*/
package com.business.entities;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ConstraintViolation;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class Admin_setAdminEmail_de656ae2b5_Test {

    private Admin admin;
    private Validator validator;

    @BeforeEach
    public void setUp() {
        admin = new Admin();
        validator = Validation.buildDefaultValidatorFactory().getValidator();
    }

    @Test
    public void testSetAdminEmail_ValidEmail() {
        String validEmail = "test@example.com";
        admin.setAdminEmail(validEmail);
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertTrue(violations.isEmpty());
        assertEquals(validEmail, admin.getAdminEmail());
    }

    @Test
    public void testSetAdminEmail_InvalidEmailWithoutAtSymbol() {
        String invalidEmail = "testexample.com";
        admin.setAdminEmail(invalidEmail);
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertEquals("must be a well-formed email address", violations.iterator().next().getMessage());
    }

    @Test
    public void testSetAdminEmail_NullEmail() {
        admin.setAdminEmail(null);
        Set<ConstraintViolation<Admin>> violations = validator.validate(admin);
        assertEquals(1, violations.size());
        assertEquals("must not be null", violations.iterator().next().getMessage());
    }

    // TODO: Add more test cases to cover all scenarios
}
